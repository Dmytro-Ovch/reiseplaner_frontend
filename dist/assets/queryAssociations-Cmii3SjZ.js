import{r as y,A as a,B as m,F as d,K as f,M as g,L as w,N as v,hD as S,aa as $,bh as h}from"./index-QkvpMIk7.js";import{d as j}from"./Association-Cvn2wur0.js";let o=class extends y{constructor(e){super(e),this.associations=[]}};a([m({type:[j],json:{write:!0}})],o.prototype,"associations",void 0),o=a([d("esri.rest.networks.support.QueryAssociationsResult")],o);function I(s){const{returnDeletes:e,elements:r,gdbVersion:n,moment:i}=s.toJSON();return{returnDeletes:e,elements:JSON.stringify(r.map((t=>({globalId:t.globalId,networkSourceId:t.networkSourceId,terminalId:t.terminalId})))),types:JSON.stringify(s.types.map((t=>h.toJSON(t)))).replaceAll('"connectivity"','"junctionJunctionConnectivity"'),gdbVersion:n,moment:i??Date.now()}}async function b(s,e,r){const n=f(s),i={...I(e),f:"json"},t=g({...n.query,...i}),c=w(t,{...r,method:"post"}),u=`${n.path}/associations/query`,{data:p}=await v(u,c),l=o.fromJSON(p);return e.types.includes("connectivity")&&S($.getLogger("esri/rest/networks/support/QueryAssociationsParameters"),"types",{replacement:"Please use 'junction-junction-connectivity' instead of 'connectivity'.",see:"https://arcg.is/11Tr8a#types",version:"4.29",warnOnce:!0}),l}export{b as queryAssociations};
